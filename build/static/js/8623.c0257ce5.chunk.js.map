{"version":3,"file":"static/js/8623.c0257ce5.chunk.js","mappings":"6LAUO,MAAMA,EAAWC,IAEpBC,EAAAA,EAAAA,KAACC,EAAAA,EAAEC,IAAG,CAACC,UAAU,oBAAqBJ,EAAMK,UAASC,UACnDL,EAAAA,EAAAA,KAACM,EAAAA,EAAO,CACNC,WAAW,EACXC,SAAU,EACVC,SAAU,EACVC,aAAa,EACbP,UAAS,cAAAQ,OAAgBZ,EAAMI,UAAS,WAAUE,SAEjDN,EAAMM,aAMFO,EAAab,IACxB,MAAMc,GAAcC,EAAAA,EAAAA,QAAO,OACpBC,EAAOC,IAAYC,EAAAA,EAAAA,UAAS,IAC5BC,EAAWC,IAAgBF,EAAAA,EAAAA,UAAS,IACpCG,EAAWC,IAAgBJ,EAAAA,EAAAA,UAAS,GACrCK,GAAUR,EAAAA,EAAAA,QAAO,CAAC,GAClBS,EAAQ,CACZ,eAAyC,kBAAjBxB,EAAMyB,MAAmB,6BAAAb,OAAgCZ,EAAMyB,MAAMC,KAAIC,GAAQA,IAAK,KAAM3B,EAAMyB,MAC1H,eAA4C,kBAArBzB,EAAM4B,UAAuB,6BAAAhB,OAAgCZ,EAAM4B,UAAUF,KAAIC,GAAQA,IAAK,KAAM3B,EAAM4B,WAkCnI,OA/BAC,EAAAA,EAAAA,YAAU,KACR,MAAMC,EAAaC,aACjB,KACEd,GAAUD,GACJA,IAAUhB,EAAMgC,KAAKC,OAAS,EACzBjB,EAAQ,EAER,GAET,GACDhB,EAAMkC,UAEX,MAAO,IAAMC,aAAaL,EAAW,GAEpC,KAEHD,EAAAA,EAAAA,YAAU,KACR,IAAIO,EAAW,EACXC,EAAY,EAChBC,YAAW,KACOxB,EAAYyB,QAAQC,iBAAiB,gCAC3CC,SAAQ,SAAUd,GAC1BS,EAAWT,EAAKe,YAAcN,EAAWT,EAAKe,YAAcN,EAC5DC,EAAYV,EAAKgB,aAAeN,EAAYV,EAAKgB,aAAeN,CAClE,IACAjB,EAAagB,EAAS,IACtBd,EAAae,EAAU,GACtB,IAAK,GAEP,KAGDpC,EAAAA,EAAAA,KAACC,EAAAA,EAAEC,IAAG,CACJyC,QAAS,CAAEC,MAAO,QAClBC,QAAS,CAAED,MAAO1B,EAAW4B,OAAQ1B,GACrC2B,IAAKlC,EACLV,UAAS,mBAAAQ,OAAqBI,EAAQ,cAAgB,IAAEJ,OAAGZ,EAAMK,UAAS,IAAAO,OAAOZ,EAAMK,WAAc,IAAEO,OAAGZ,EAAMI,UAAS,IAAAQ,OAAOZ,EAAMI,WAAc,IACpJoB,MAAOA,EAAMlB,SAEZN,EAAMgC,KAAKN,KAAI,CAACC,EAAMsB,KAEnBhD,EAAAA,EAAAA,KAAA,QAEEG,UAAS,UAAAQ,OAAYI,IAAUiC,EAAI,cAAgB,cACnDD,IAAKE,GAAM3B,EAAQgB,QAAQU,GAAKC,EAAG5C,SAEd,SAApBN,EAAMK,WAA4C,SAApBL,EAAMK,UACjCsB,EAAKwB,MAAM,IAAIzB,KAAI,CAACwB,EAAIE,KAEtBnD,EAAAA,EAAAA,KAAA,KAAWG,UAAWY,IAAUiC,EAAI,KAAO,MAAOzB,MAAO,CAAE6B,gBAAgB,GAADzC,OAAMZ,EAAMsD,UAAY3B,EAAKwB,MAAM,IAAIlB,OAAU,IAAOmB,EAAC,MAAM9C,SACtI4C,GADKE,KAKVzB,GAZCsB,MAgBL,EAIZlD,EAAQwD,aAAe,CACrBnD,UAAW,a,kDCjGToD,E,SAA4BC,EAAYC,EAAAA,gBAAkB7B,EAAAA,S","sources":["Components/FancyText/FancyText.jsx","../node_modules/framer-motion/dist/es/utils/use-isomorphic-effect.mjs"],"sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\r\n\r\n// Libraries\r\nimport Atropos from \"atropos/react\";\r\nimport { m } from \"framer-motion\";\r\nimport { PropTypes } from \"prop-types\";\r\n\r\n// css\r\nimport \"../../Assets/scss/components/_textAnime.scss\"\r\n\r\nexport const TiltBox = (props) => {\r\n  return (\r\n    <m.div className=\"justify-center\" {...props.animation}>\r\n      <Atropos\r\n        highlight={false}\r\n        stretchX={0}\r\n        stretchY={0}\r\n        rotateTouch={false}\r\n        className={`my-atropos ${props.className} w-full`}\r\n      >\r\n        {props.children}\r\n      </Atropos>\r\n    </m.div>\r\n  );\r\n};\r\n\r\nexport const TextAnime = (props) => {\r\n  const wordwrapper = useRef(null);\r\n  const [index, setIndex] = useState(0);\r\n  const [maxLength, setMaxLength] = useState(0)\r\n  const [maxHeight, setMaxHeight] = useState(0)\r\n  const textEls = useRef({})\r\n  const style = {\r\n    \"--text-color\": typeof (props.color) === \"object\" ? `linear-gradient(to right, ${props.color.map(item => item)})` : props.color,\r\n    \"--line-color\":typeof (props.lineColor) === \"object\" ? `linear-gradient(to right, ${props.lineColor.map(item => item)})` : props.lineColor,\r\n  }\r\n\r\n  useEffect(() => {\r\n    const intervalId = setInterval(\r\n      () => {\r\n        setIndex((index) => {\r\n          if (index !== props.data.length - 1) {\r\n            return index + 1;\r\n          } else {\r\n            return 0;\r\n          }\r\n        })\r\n      }, props.duration\r\n    );\r\n    return () => clearTimeout(intervalId);\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    let maxWidth = 0,\r\n        maxheight = 0;\r\n    setTimeout(() => {\r\n      let cdWrapper = wordwrapper.current.querySelectorAll(\".cd-words-wrapper > .cd-text\");\r\n      cdWrapper.forEach(function (item) {\r\n        maxWidth = item.clientWidth > maxWidth ? item.clientWidth : maxWidth;\r\n        maxheight = item.clientHeight > maxheight ? item.clientHeight : maxheight;\r\n      })\r\n      setMaxLength(maxWidth+10)\r\n      setMaxHeight(maxheight)\r\n    }, 1000);\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [])\r\n\r\n  return (\r\n    <m.div\r\n      initial={{ width: \"auto\" }}\r\n      animate={{ width: maxLength, height: maxHeight }}\r\n      ref={wordwrapper}\r\n      className={`cd-words-wrapper${index ? \" is-loading\" : \"\"}${props.animation ? ` ${props.animation}` : \"\"}${props.className ? ` ${props.className}` : \"\"}`}\r\n      style={style}\r\n    >\r\n      {props.data.map((item, i) => {\r\n        return (\r\n          <span\r\n            key={i}\r\n            className={`cd-text${index === i ? \" is-visible\" : \" is-hidden\"}`}\r\n            ref={el => textEls.current[i] = el}\r\n          >\r\n            {props.animation === \"type\" || props.animation === \"flip\"\r\n              ? item.split(\"\").map((el, j) => {\r\n                return (\r\n                  <i key={j} className={index === i ? \"in\" : \"out\"} style={{ transitionDelay: `${(props.charSpeed / item.split(\"\").length) / 2000 * j}s` }}>\r\n                    {el}\r\n                  </i>\r\n                );\r\n              })\r\n              : item}\r\n          </span>\r\n        );\r\n      })}\r\n    </m.div>\r\n  );\r\n};\r\n\r\nTiltBox.defaultProps = {\r\n  className: \"font-serif\",\r\n};\r\n\r\nTiltBox.propTypes = {\r\n  className: PropTypes.string,\r\n  animation: PropTypes.object\r\n}\r\n\r\nTextAnime.propTypes = {\r\n  className: PropTypes.string,\r\n  animation: PropTypes.string,\r\n  duration: PropTypes.number,\r\n  color: PropTypes.oneOfType([\r\n    PropTypes.object,\r\n    PropTypes.string\r\n  ]),\r\n  lineColor: PropTypes.oneOfType([\r\n    PropTypes.object,\r\n    PropTypes.string\r\n  ]),\r\n}","import { useLayoutEffect, useEffect } from 'react';\nimport { isBrowser } from './is-browser.mjs';\n\nvar useIsomorphicLayoutEffect = isBrowser ? useLayoutEffect : useEffect;\n\nexport { useIsomorphicLayoutEffect };\n"],"names":["TiltBox","props","_jsx","m","div","className","animation","children","Atropos","highlight","stretchX","stretchY","rotateTouch","concat","TextAnime","wordwrapper","useRef","index","setIndex","useState","maxLength","setMaxLength","maxHeight","setMaxHeight","textEls","style","color","map","item","lineColor","useEffect","intervalId","setInterval","data","length","duration","clearTimeout","maxWidth","maxheight","setTimeout","current","querySelectorAll","forEach","clientWidth","clientHeight","initial","width","animate","height","ref","i","el","split","j","transitionDelay","charSpeed","defaultProps","useIsomorphicLayoutEffect","isBrowser","useLayoutEffect"],"sourceRoot":""}